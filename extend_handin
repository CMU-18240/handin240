#!/usr/bin/python
# extend_handin.py
#
# Utility script for reopening handin directory for specific students, if
# extensions are to be given for whatever reason. Once the extension time has
# passed, the close_handin script can be used to again close all handins.
#
# Edric Kusuma <ekusuma@cmu.edu>

import argparse
import ConfigParser
import os
import sys
import subprocess

# Colors!
class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKGREEN = "\033[92m"
    WARNING = "\033[33m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"

# Initialize config file
########################
conf = ConfigParser.ConfigParser()
conf.read('config.ini')

HANDIN_DIR  = conf.get('HANDIN', 'HANDIN_DIR')

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument("hwNum", help="number of assignment to extend")
    parser.add_argument("studentIDs", nargs="+",
                        help="student IDs to grant extensions to")
    parser.add_argument("-v", action="store_true", dest="isVerbose",
                      default=False, help="verbose script output")
    return parser.parse_args()

# Sets AFS permissions such that the student may write to the directory
# Admins have usual admin permissions, and other students may not access
def setStudentPerms(studentID, path):
    successes = []
    fsCmd = ["fs", "seta", "-dir", path, "-clear", "-acl"]
    peoplePerms = [
        "system:web-srv-users", "rl",
        "ee240:ta", "all",
        "ee240:staff", "all",
        "ee240", "all",
        "system:administrators", "all",
        studentID, "write"
    ]
    fsCmd += peoplePerms
    try:
        subprocess.check_output(fsCmd)
        successes.append(studentID)
        return True
    except subprocess.CalledProcessError, e:
        error = bcolors.FAIL
        error += "Error granting extension for {}".format(studentID)
        error += bcolors.ENDC
        print(error)
        return False

def openStudentDirs(basePath, ids):
    successes = []
    for student in ids:
        path = basePath + "/" + student.lower()
        success = setStudentPerms(student, path)
        if (success):
            successes.append(student)

    return successes

def main():
    args = getArgs()

    global HW_NUM
    HW_NUM = args.hwNum
    global VERBOSE
    VERBOSE = args.isVerbose
    studentList = args.studentIDs

    handinDir = HANDIN_DIR + "/" + HW_NUM

    successes = openStudentDirs(handinDir, studentList)

    names = ", ".join(successes)
    if (len(successes) == 0):
        print("Unable to grant any extensions.")
        return 1
    else:
        print("Extensions granted for " + names)
    return 0

sys.exit(main())
