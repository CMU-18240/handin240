#!/usr/bin/python
# open_handin.py
#
# Utility script to create student directories in the assignment's handin
# folder. Requires a student roster file (filename and path detailed in env.py)
# that has all student Andrew IDs, separated by a newline. Requires the user
# running the script to be someone with access to the STAFF folder.
#
# Edric Kusuma <ekusuma@cmu.edu>

import optparse;
import os;
import subprocess;
import csv;
from env import *;

isVerbose = False;

# Colors!
class bcolors:
    HEADER = "\033[95m";
    OKBLUE = "\033[94m";
    OKGREEN = "\033[92m";
    WARNING = "\033[93m";
    FAIL = "\033[91m";
    ENDC = "\033[0m";
    BOLD = "\033[1m";
    UNDERLINE = "\033[4m";

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    usage = "usage: %prog [-rv] hwNum";
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-r", action="store", type="string", dest="rosterPath",
                      default=ROSTER, help="path to student roster file");
    parser.add_option("-v", action="store_true", dest="isVerbose",
                      default=False, help="verbose script output");
    (options, args) = parser.parse_args();
    if (len(args) != 1):
        parser.error("Must specify homework number as arg");
    return (options, args);

# Sets AFS permissions such that the student may write to the directory
# Admins have usual admin permissions, and other students may not access
def setStudentPerms(studentID, path):
    fsCmd = ["fs", "seta", "-dir", path, "-clear", "-acl"];
    peoplePerms = [
        "system:web-srv-users", "rl",
        "ee240:ta", "all",
        "ee240:staff", "all",
        "ee240", "all",
        "system:administrators", "all",
        studentID, "write"
    ];
    fsCmd += peoplePerms;

    retVal = None;
    devnull = open(os.devnull, "w");
    try:
        subprocess.check_call(fsCmd, stderr=devnull);
    except subprocess.CalledProcessError, e:
        retVal = studentID;
    devnull.close();

    return retVal;

def printBadIDs(idList):
    print("\n{}Error:{} unable to set perms for".format(bcolors.FAIL, bcolors.ENDC));
    for id in idList:
        print("\t" + id);
    print("Please check that ID is correct, and that student is in the ECE system.");

# Creates a directory for each student inside of the basePath directory. ids
# must be an array of student IDs.
def createStudentDirs(basePath, ids):
    badIDs = [];
    for student in ids:
        path = basePath + "/" + student.lower();
        if (not os.path.exists(path)):
            os.mkdir(basePath + "/" + student.lower());
        elif (isVerbose):
            print("Handin dir already exists for " + student.lower() +
                    ", skipping");
        retVal = setStudentPerms(student, path);
        if (retVal != None):
            badIDs.append(student);
    if (len(badIDs) != 0):
        printBadIDs(badIDs);

def parseCSV(csvPath, field="Andrew ID"):
    csvReader = csv.DictReader(csvPath);
    studentList = [];
    for row in csvReader:
        studentList.append(row[field]);
    return studentList;

def main():
    (options, args) = getArgs();
    hwNum = args[0];
    global isVerbose;
    isVerbose = options.isVerbose;

    handinDir = HANDIN_DIR + "/" + hwNum;
    print("Creating handin directories for " + hwNum + " in " + handinDir);
    if (not os.path.exists(handinDir)):
        os.mkdir(handinDir);
    elif (isVerbose):
        print("Path exists for " + handinDir + ", skipping");

    if (isVerbose):
        print("Using roster file in " + options.rosterPath + "\n");
    try:
        rosterFile = open(options.rosterPath, "r");
    except IOError, e:
        print("Error: no such file in " + options.rosterPath);
        print("\nHandin directories not created. Exiting...");
        return 255;
    studentIDs = parseCSV(rosterFile);
    createStudentDirs(handinDir, studentIDs);
    rosterFile.close();

    print("\nHandin directories created.");
    return 0;

exit(main());
