#!/usr/bin/python
# create_student_dir.py
#
# Utility script to create student directories in the assignment's handin
# folder. Requires a student roster file (filename and path detailed in env.py)
# that has all student Andrew IDs, separated by a newline. Requires the user
# running the script to be someone with access to the STAFF folder.
#
# In the future, this script should be able to also modify fs permissions, for
# ease of use.

import optparse;
import os;
from env_test import *;

# Function for error handling. Will return an exit code, but not actually cause
# script to exit in case we want to do some cleanup (i.e. remove temporary
# directories)
def error(message, exitStatus=1):
    print(message);
    return exitStatus;

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    usage = "usage: %prog [-r] hwNum";
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-r", action="store", type="string", dest="rosterPath",
                      default=ROSTER, help="path to student roster file");
    (options, args) = parser.parse_args();
    if (len(args) != 1):
        parser.error("Must specify homework number as arg");
    return (options, args);

# Creates a directory for each student inside of the basePath directory. ids
# must be an array of student IDs.
def createStudentDirs(basePath, ids):
    for student in ids:
        os.mkdir(basePath + "/" + student);

def main():
    (options, args) = getArgs();
    hwNum = args[0];
    handinDir = HANDIN_DIR + "/" + hwNum;
    os.mkdir(handinDir);

    rosterFile = open(options.rosterPath, "r");
    studentIDs = rosterFile.read().split();
    createStudentDirs(handinDir, studentIDs);
    rosterFile.close();

    return 0;

exit(main());
