#!/usr/bin/python
# close_handin.py
#
# Utility script for closing student handin directories. Will take every student
# directory in the handin dir, and remove write permissions for that student.
# They will be replaced with read permissions.
# Requires TA/staff permissions for this to work properly.
#
# This script should be run as soon as the hw deadline is passed

import optparse;
import os;
import subprocess;
from env_test import *;
# Uncomment this line when rolling out for production
#from env import *;

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    usage = "usage: %prog [-r] hwNum";
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-r", action="store", type="string", dest="rosterPath",
                      default=ROSTER, help="path to student roster file");
    (options, args) = parser.parse_args();
    if (len(args) != 1):
        parser.error("Must specify homework number as arg");
    return (options, args);

# Sets AFS permissions such that the student may no longer write to the directory
def closeStudentPerms(studentID, path):
    fsCmd = ["fs", "seta", "-dir", path, "-clear", "-acl"];
    peoplePerms = [
        "system:web-srv-users", "rl",
        "ee240:ta", "all",
        "ee240:staff", "all",
        "ee240", "all",
        "system:administrators", "all",
        studentID, "read"
    ];
    fsCmd += peoplePerms;
    subprocess.call(fsCmd);

def closeStudentDirs(basePath, dirs):
    for studentDir in dirs:
        path = basePath + "/" + studentDir;
        closeStudentPerms(studentDir, path);

def main():
    (options, args) = getArgs();
    hwNum = args[0];
    handinDir = HANDIN_DIR + "/" + hwNum;
    if (not os.path.exists(handinDir)):
        print(hwNum + " handin directory does not exist.");
        exit(255);
    fileList = os.listdir(handinDir);

    closeStudentDirs(handinDir, fileList);

    return 0;

exit(main());
