#!/usr/bin/python
# handin240_open.py
#
# Utility script to create student directories in the assignment's handin
# folder. Requires a student roster file (filename and path detailed in env.py)
# that has all student Andrew IDs, separated by a newline. Requires the user
# running the script to be someone with access to the STAFF folder.
#
# Edric Kusuma <ekusuma@cmu.edu>

import handin240_utils.admin as admin
import handin240_utils.utils as utils
from handin240_utils.utils import bcolors as bc
import argparse
import os
import sys
import subprocess
import csv
import json

# Globals useful for this script
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
ENV         = utils.get_env(SCRIPT_PATH + '/config.ini')

# Returns a tuple of (options, args) parsed from the command line.
def getArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('hwNum', help='number of assignment to open')
    parser.add_argument('-r', '--roster', action='store', type=str,
                        dest='rosterPath', default=ENV['roster'],
                        help='path to student roster file')
    parser.add_argument('-v', action='store_true', dest='isVerbose',
                        default=False, help='verbose script output')
    parser.add_argument('-n', '--dryrun', action='store_true', dest='dryrun',
                        default=False,
                        help='prevents script from creating/modifying files')
    return parser.parse_args()

def main():
    args = getArgs()
    hwNum = args.hwNum
    verbose = args.isVerbose
    dryrun= args.dryrun
    rosterPath = args.rosterPath

    if (dryrun):
        bc.warning_msg('dryrun option is enabled. Script will not make files or change perms!\n')

    try:
        path = utils.searchCfg(hwNum, ENV['cfg_dir'])
        utils.checkJson(path)
    except utils.ConfigError as e:
        print(e)
        exit (255)

    handinDir = ENV['handin_dir'] + '/' + hwNum
    print('Creating handin directories for ' + hwNum + ' in ' + handinDir)
    if ((not dryrun) and (not os.path.exists(handinDir))):
        os.mkdir(handinDir)
    elif (verbose):
        print('Path exists for ' + handinDir + ', skipping')

    if (verbose):
        print('Using roster file in ' + rosterPath)
    try:
        rosterFile = open(rosterPath, 'r')
    except IOError, e:
        print('Error: no such file in ' + rosterPath)
        print('\nHandin directories not created. Exiting...')
        return 255
    studentIDs = utils.parseCSVField(rosterFile, 'Andrew ID')
    admin.createStudentDirs(handinDir, studentIDs, dryrun=dryrun, verbose=verbose)
    rosterFile.close()

    print('\nHandin directories created.')
    return 0

sys.exit(main())
